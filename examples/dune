
(executable
  (name sse_server)
  (modules sse_server)
  (libraries simple_httpd unix ptime ptime.clock.os))

(executable
  (name sse_client)
  (modules sse_client)
  (libraries unix))

(executable
  (name echo)
  (flags :standard -warn-error -a+8)
  (modules echo vfs)
  (libraries simple_httpd simple_httpd_camlzip))

(executable
  (name minimal)
  (flags :standard -warn-error -a+8)
  (modules minimal)
  (libraries simple_httpd))

(rule
  (targets test_output.txt)
  (deps (:script ./run_test.sh) ./sse_client.exe ./sse_server.exe)
  (enabled_if (= %{system} "linux"))
  (package simple_httpd)
  (action
    (with-stdout-to %{targets} (run %{script}))))

(rule
  (alias runtest)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (deps test_output.txt)
  (action
    (diff test_output.txt.expected test_output.txt)))

; produce an embedded FS
(rule
  (targets vfs.ml)
  (deps (source_tree files) (:out test_output.txt.expected))
  (enabled_if (= %{system} "linux"))
  (action (run %{bin:simple-httpd-vfs-pack} -o %{targets}
               --mirror=files/
               --file=test_out.txt,%{out}
               ; --url=example_dot_com,http://example.com ; this breaks tests in opam sandbox ðŸ˜¢
               )))

(rule
  (targets vfs.ml)
  (enabled_if (<> %{system} "linux"))
  (action
    (with-stdout-to
      %{targets}
      (progn
        (echo "let embedded_fs = Simple_httpd_dir.Embedded_fs.create ~mtime:0. ()")
        (echo "let vfs = Simple_httpd_dir.Embedded_fs.to_vfs embedded_fs")))))
