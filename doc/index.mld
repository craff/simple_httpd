{0 Simple_httpd library to write web server and application}

This library implements a HTTP/1.1 server for Linux using domains and
algebraic effect. It uses [epoll] and [eventfd] to schedule the treatment of
clients efficiently, with one domain used to accept request and several
domains to handle these requests. ̀Simple_httpd` can listen to several adresses
and ports and use this information together with the headers `Host` field to
decide how to answer the request. It is relatively fast and can handle
thousands of simultaneous connections, because if uses then `sendfile` system
call and other TCP options to gain efficiency.

 ̀Simple_httpd` provides:

- Routing with function to add route
- Handling of static files possibly using a memory cache or a virtual file system.
- Basic managment of session and cookies
- Support for ssl
- A host module dedicated to write single server handling several sites

Here are some curves showing the performance on static files compared to nginx and
apache:

{%html: <p align="center"><img src="https://raffalli.eu/simple_httpd/small.png" alt="comparison for small files"/></p>%}

{%html: <p align="center"><img src="https://raffalli.eu/simple_httpd/big.png" alt="comparison for large files"/></p>%}

See [examples/echo.ml] below, that demonstrates some of the features by
declaring a few endpoints, including one for uploading files and a virtual
file system.

To go further, you should start reading
- {!Simple_httpd} the main module of the library:
- {{:../../simple_httpd_camlzip/Simple_httpd_camlzip/index.html}Simple_httpd_camlzip}
  to compress response body and decompress request body.

{[
open Simple_httpd

let () =
  let addr = ref "127.0.0.1" in
  let port = ref 8080 in
  let j = ref 32 in
  let t = ref (Domain.recommended_domain_count ()) in
  Arg.parse (Arg.align [
      "--addr", Arg.Set_string addr, " set address";
      "--port", Arg.Set_int port, " set port";
      "--log", Arg.Int Log.set_log_lvl, " set log level";
      "-j", Arg.Set_int j, " maximum number of connections";
      "-t", Arg.Set_int t, " number of threads/domains used";
    ]) (fun _ -> raise (Arg.Bad "")) "echo [option]*";

  let listens = [Address.make ~addr:!addr ~port:!port ()] in
  let server = Server.create ~num_thread:!t ~listens ~max_connections:!j () in

  (* echo request *)
  Server.add_route_handler server
    Route.(exact "echo" @/ return)
    (fun req ->
        Response.make_string
          (Format.asprintf "echo:@ %a@\n@." Request.pp req));

  Array.iter (fun l ->
      let open Address in
      Printf.printf "listening on http://%s:%d\n%!" l.addr l.port)
    (Server.listens server);

  Server.run server
]}
