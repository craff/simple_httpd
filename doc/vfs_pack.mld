{0 [vfs_pack] web site compiler and [chaml] preprocessor}

{1 [vfs_pack] }

The binary [vfs_pack], provided with [Simple_httpd], will compile your website to
a ML module of type {!Simple_httpd.Dir.VFS} that can be used with
{!Simple_httpd.Dir.add_vfs}. It will

- compile a directory structure to a list of routes (see {!Simple_httpd.Route}),
- it can be configured to allow directory listing or redirection to [index.html],
- large files are not stored into memory but may be installed in a separate
  directory,
- precompressed version of a file (with deflate a.k.a zlib) can be stored too.
- dynamic [.chaml] can be used to produce dynamic pages.

Here is an example of `.chaml` included in the distribution:

{[
<!DOCTYPE html>
<html>
  <head>
    <?prelude
      let count = try Request.get_cookie_int request "count"
                  with Not_found -> 0
      let cookies = Cookies.(create ~max_age:3600L ~same_site:`Strict
                               ~name:"count"  (string_of_int (count+1)) empty)
     ?>
  </head>
  <body>
    <h1>dynamic hello!</h1>
    <ul>
      <li> item 1 </li>
      <li> item 2 </li>
      <li> item 3 </li>
      <li> item 4 </li>
      <li> views: <?ml
	  let _ = echo (string_of_int count)
	  let _ = echo (if count mod 2 = 0 then
 	                  {html|<p>even (<?= string_of_int count ?>)</p>|html}
	                else {html|<p>odd</p>|html})
	?>
      </li>
    </ul>
    <a href="."> escape from this file </a>
    <br/>
    request: <?ml
      let _ = printf "%a" Request.pp request
    ?>
  </body>
</html>
]}

As you can see, some defect of php are avoided: no quote everywhere, and
some waranty about the generated html (see below).

Here is the documentation of the [vfs_pack] command line:

{[
vfs-pack [opt]+
]}
Builds an OCaml module containing a {!Simple_httpd.Dir.Embedded_fs.t}
virtual file system. This is useful to pack assets into an OCaml binary,
for example. Each entry in the VFS can be added from the command line.
{[
  -v             verbose mode
  -o             <file> set output file
  --file         <name,file> adds name=file to the VFS
  --url          <name,url> adds name=url to the VFS
  --mirror       <prefix,dir> adds prefix=dir to the vfs, copying all files in directory dir
  --max-size     <size>, max size to hold file in memory (default: infinite). Bigger filed are copied to the folder given by --destination. A compressed version .zlib is also produced if it is at least 10% smaller.
  --destination  <dir> set the destination folder to use with mirror
  --perm         <int> set the permission of created folder
  -F             <file> reads entries from the file, written using this command line option syntax.
  -help          Display this list of options
  --help         Display this list of options
]}

{1 [chaml] }

You may also build html contents inside OCaml code using our [chaml]
preprocessor, to be used with the [-pp] option of ocaml compilers. Here is an
example, part of the file [examples/echo.ml] from the distribution:

{[
let _ =
  Server.add_route_handler_chaml server ~filter Route.return
    {chaml|
     <!DOCTYPE html>
     <html>
       <head>
         <title>index of echo</title>
       </head>
       <body>
	 <h3>welcome</h3>
	 <p><b>endpoints are</b></p>
	 <ul>
	   <li><pre>/ (GET)</pre> this file!</li>
           <li><pre>/hello/:name (GET)</pre> echo message</li>
           <li><pre><a href="/echo">echo</a></pre> echo back query</li>
           <li><pre>/upload/:path (PUT)</pre> to upload a file</li>
           <li><pre>/zcat/:path (GET)</pre> to download a file (deflate transfer-encoding)</li>
           <li><pre><a href="/stats/">/stats (GET)</a></pre> to access statistics</li>
           <li><pre><a href="/vfs/">/vfs (GET)</a></pre> to access a VFS
             embedded in the binary</li>
	 </ul>
       </body>
     </html>|chaml}
]}

The preprocessor can be used with such a dune rule:

{[
  (preprocess (per_module
    ((action (run %{bin:chaml} %{input-file})) ML_MODULES_WITH_CHAML_SYNTAX)))
]}

{1 syntax}

There are four ways to insert ocaml code in html:

- [<?= extr ?>]: that build html elements as a string from an ocaml
  expression.  Like all other OCaml section, the value [request : string]
  {!Simple_httpd.Request.t} is available.

- In tag attributes one may use [name=<?= expr?>] to evaluate the
   attribute using Ocaml.

- [<?ml struct ?>]: which will produce an expression of type {!Simple_httpd.Html.elt} [=
  (module Html.Output) -> unit] from an ocaml structure. Contrary to the
  previous case, no string are allocated and the content is directly sent
  using the two functions [Out.echo] and [Out.printf] from a module [Out :
  {!Simple_httpd.Html.Output}].

  Values defined in such section are available in other sections at the same
  level of nesting (see below).

- [<?prelude struct ?>]: similar to the previous one, but it is executed before
  any output is done to the server and may shadow two values [headers :]
  {!Simple_httpd.Headers.t} and [cookies :] {!Simple_httpd.Cookies.t}, to set the
  headers and cookies of the response.

  The response headers initially contains a
  {!Simple_httpd.Headers.Cache_Control} with ["no-store"] value. You may add
  headers or change the {!Simple_httpd.Headers.Cache_Control}, for instance if
  your chaml file is functional in the query, you could use
  {!Simple_httpd.Headers.ETag} with some well chosen hash.

  The latter response cookies are initially empty. For instance, this
  allows to read and modify cookies or start a {!Simple_httpd.Session}.

  Values defined in this section are part of a [Prelude] module which is
  accessible in <?=...?> and <?prelude...?> sections.

  Preferably (but this is not enforced by the parser), all prelude section
  should at the beginning of the chaml code.

- [<?global struct ?>]. This section are placed in a module at the top level
  of the file generated by the command [vfs_pack] (this section are not
  permitted when using the [chaml] command (see below)).  This module is named
  after the name of the chaml file. In the case of [chaml], it is just
  inserted locally.

  Therefore, this module is run only once at startup.  This is
  useful for instance to extend the {!Simple_httpd.Session.session_data} type
  and more generally to prepare some type and data common to all requests.

  Here is an example using session:

  {[
  <!DOCTYPE html>
  <html>
  <head>
    <?global
      type Async.session_data += Count of int
    ?>
    <?prelude
      let cookies, session = Session.check ~init:(fun _ -> Count 0) request
      let count =
        match Session.get_session_data session with
        | Count n -> n
        | _ -> -12
        | exception Not_found -> -100
      let _ = Session.set_session_data session (Count (count+1))
    ?>
  </head>
  <body>
  ...
  ]}

Next, you may insert html code inside ocaml code in three ways:

- [{html| html_contents |html}] which produces a value of type [string]

- [{funml| html_contents |funml}] which produces a value of type
  {!Simple_httpd.Html.elt} [= (module Html.Output) -> unit]. You will have to
  give the provided value [output = (module Out)] as argument to use it.

- [{chaml| html_document |chaml}] to be used with [chaml] preprocessor, but
  useless with [vfs_pack] which produces a value of type
  {!Simple_httpd.Html.chaml} that can be given to the function
  {!Simple_httpd.Server.add_route_handler_chaml}.

{1 Note about html syntax}

If you do not produce html tag yourself, all the html should
be well parenthesised. You can not write some code like:
{[
{html|<div>|html} ^ some code producing a string ^ {html|</div>|html}
]}
it will give a parse error. Instead, you must write:
{[
{html|<div><?= some code producing a string ?></div>|html}
]}

We tried to implement a superset of html specification as given in
{{:https://html.spec.whatwg.org/multipage}the HTML Living Standard}.

In pure html, the nesting of html section is verified (rules like only [<tr>]
can appear in [<tbody>]). However, rules about the order of html tags are not
implemented (we do not check [head] before [body]. Similarly, only the
ommission of [<tbody>] inside [<table>] is supported and omission of empty
sections, like the [<head>] sections. All end tags omission are supported
(like [</li>]). No check is currently performed for MathMl of svg and any
foreign tag is supported and accepted in any context expressing phrasing tag.
Foreign tags are not accepted in other context.
