{0 Vfs_pack web site compiler}

vfs_pack is a binary too that will compile your website to a ML site that
can ve used with {!Simple_httpd.Dir.add_vfs}. It will

- compile a directory structure to a list of Route (see {!Simple_httpd.Route},
- It can be configured to allow directory listing or redirection to `index.html`,
- Large files are not compiled into memory and may be installed in a separate
  directory
- precompiled version of large file (with deflate a.k.a zlib) can be stored too.
- dynamic `.chaml` can be used to produce dynamic pages.

Here is an example of `.chaml` included in the distribution:

{[
<!DOCTYPE html>
<html>
  <head>
    <script type="ml/prelude">
      let count = try Request.get_cookie_int request "count"
                  with Not_found -> 0
      let cookies = Cookies.(create ~max_age:3600L ~same_site:`Strict
                               ~name:"count"  (string_of_int (count+1)) cookies)
    </script>
  </head>
  <body>
    <h1>dynamic hello!</h1>
    <ul>
      <li> item 1 </li>
      <li> item 2 </li>
      <li> item 3 </li>
      <li> item 4 </li>
      <li> views: <ML>
	  let _ = echo (string_of_int count);;
	  let _ = echo (if count mod 2 = 0 then
 	                  <p>even (<ML> ^ string_of_int count ^ </ML>)</p>
	                else <p>odd</p>)
	</ML>
      </li>
    </ul>
    <a href="."> escape from this file </a>
    <br/>
    request: <ML>
      let _ = printf "%a" Request.pp request
    </ML>
  </body>
</html>
]}

As you can see, some defect of php are avoided: no quote/double every where.

There are four ways to insert ocaml code:

- In all [<ML>...</ML>] or [<script type="ml">...</script>] sections
  correspond to OCaml code. In this code [Simple_httpd] is open, the value
  [request :] {!Simple_httpd.Request.t} is accessible.

- OCaml sections which are not inside others are compiled as toplevel
  expressions. You may define type, values, ...  In these sections and you can
  use [echo] and [printf] provided automatically by opening a module of type
  {!Simple_httpd.Input.Output} if they are not "prelude" section.

- Some [<script type="ml/prelude">...</script>] section can be added inside
  the [<head>] tag but before any other OCaml sections. they are executed
  before any output is done to the server and may shadow two values [headers
  :] {!Simple_httpd.Headers.t} initialy empty and [cookies :]
  {!Simple_httpd.Cookies.t} that contain an initical
  {!Simple_httpd.Headers.Cache_Control} or {!Simple_httpd.Headers.ETag}. For
  instance, this allows to read and modify cookies or start a
  {!Simple_httpd.Session}.  Values defined in this section are part of a
  `Prelude` module which is opened in the rest of the file.

- Some [<script type="ml/global">...</script>] section can alse be added inside
  inside the [<head>] tag, they are placed at the top level of the generated ml
  file. This is usefull for instance to extend the [Async.session_data] type.
  Here is an example using session:

  {[
  <!DOCTYPE html>
  <html>
  <head>
    <script type="ml/global">
      type Async.session_data += Count of int
    </script>
    <script type="ml/prelude">
      let cookies, session = Session.check ~init:(fun _ -> Count 0) request
      let count =
        match Session.get_session_data session with
        | Count n -> n
        | _ -> -12
        | exception Not_found -> -100
      let _ = Session.set_session_data session (Count (count+1))
    </script>
  </head>
  <body>
  ...
  ]}

- In tag attributes one may use `name="$expression"` to evaluate the
   attribute using Ocaml. Use "\$..." if you want an attribute starting with
   a dollar sign. This is limited to ocaml expression without double quote.
   Use [ {|...|} ] alternative syntax for string.

- Inside OCaml sections, html sections are interpreted as ocaml
   strings.

- Nested OCaml are compiled as normal ocaml code with no modification.
  For instance, in the above example,

{[
	<ML>
	  let _ =
	    echo (if n mod 2 = 0 then
 	            <li>even (<ML> ^ string_of_int n ^ </ML>)</li>
	          else <li>odd</li>)
	</ML>
]}

is compiled as

{[
  let _ = echo (if n mod 2 = 0 then
 	            "<li>even (" ^ string_of_int n ^ ")</li>"
	          else "<li>odd</li>")
]}

Here is the documentation of the `vfs_pack` command line:

{[
vfs-pack [opt]+

Builds an OCaml module containing a `Simple_httpd.Dir.Embedded_fs.t`
virtual file system. This is useful to pack assets into an OCaml binary,
for example.

Each entry in the VFS can be added from the command line.

  -v             verbose mode
  -o             set output file
  --file         <name,file> adds name=file to the VFS
  --url          <name,url> adds name=url to the VFS
  --mirror       <prefix,dir> copies directory dir into the VFS under prefix
  --max-size     <size>, max size to hold file in memory (default: infinite). Bigger filed are copie to the folder given by --desination. A compressed version .zlib is also produced.
  --destination  set the destination folder to use with mirror
  --perm         set the permission of created folder
  -F             <file> reads entries from the file, on per line written using this command line option syntax.
  -help          Display this list of options
  --help         Display this list of options
]}
