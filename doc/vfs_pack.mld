{0 Vfs_pack web site compiler}

The binary [vfs_pack], provided with [Simple_httpd], will compile your website to
a ML module of type {!Simple_httpd.Dir.VFS} that can be used with
{!Simple_httpd.Dir.add_vfs}. It will

- compile a directory structure to a list of routes (see {!Simple_httpd.Route}),
- it can be configured to allow directory listing or redirection to [index.html],
- large files are not stored into memory but may be installed in a separate
  directory,
- precompressed version of a file (with deflate a.k.a zlib) can be stored too.
- dynamic [.chaml] can be used to produce dynamic pages.

Here is an example of `.chaml` included in the distribution:

{[
<!DOCTYPE html>
<html>
  <head>
    <script type="ml/prelude">
      let count = try Request.get_cookie_int request "count"
                  with Not_found -> 0
      let cookies = Cookies.(create ~max_age:3600L ~same_site:`Strict
                               ~name:"count"  (string_of_int (count+1)) empty)
    </script>
  </head>
  <body>
    <h1>dynamic hello!</h1>
    <ul>
      <li> item 1 </li>
      <li> item 2 </li>
      <li> item 3 </li>
      <li> item 4 </li>
      <li> views: <ml>
	  let _ = echo (string_of_int count);;
	  let _ = echo (if count mod 2 = 0 then
 	                  <p>even (<ml> ^ string_of_int count ^ </ml>)</p>
	                else <p>odd</p>)
	</ml>
      </li>
    </ul>
    <a href="."> escape from this file </a>
    <br/>
    request: <ml>
      let _ = printf "%a" Request.pp request
    </ml>
  </body>
</html>
]}

As you can see, some defect of php are avoided: no quote everywhere.

There are three ways to insert ocaml code:

- [<ml>...</ml>]: only allowed inside the body, can be arbitrarily nested with
  other tags. In this code [Simple_httpd] is open, the value [request :]
  {!Simple_httpd.Request.t} is accessible and the modules build from the
  [Prelude] and global sections (just below) are opened too.

- Some [<script type="ml/prelude">...</script>] section can be added inside
  the [<head>]. They are executed before any output is done to the
  server and may shadow two values [headers :] {!Simple_httpd.Headers.t}
  and [cookies :] {!Simple_httpd.Cookies.t}. The former is the
  response headers and may contain an initial
  {!Simple_httpd.Headers.Cache_Control} or {!Simple_httpd.Headers.ETag}. The
  latter are the response cookies, initially empty. For instance, this allows
  to read and modify cookies or start a {!Simple_httpd.Session}.  Values
  defined in this section are part of a [Prelude] module which is opened in
  the [<ml>...</ml>] sections.

- Some [<script type="ml/global">...</script>] section can also be added
  inside inside the [<head>] tag, they are placed in a module at the top level
  of the file generated by [vfs_pack]. This module is named after the name of the
  chaml file.  Therefore, this module is run only once at startup.  This is
  useful for instance to extend the {!Simple_httpd.Session.session_data} type
  and more generally to prepare some type and data common to all requests.

  Here is an example using session:

  {[
  <!DOCTYPE html>
  <html>
  <head>
    <script type="ml/global">
      type Async.session_data += Count of int
    </script>
    <script type="ml/prelude">
      let cookies, session = Session.check ~init:(fun _ -> Count 0) request
      let count =
        match Session.get_session_data session with
        | Count n -> n
        | _ -> -12
        | exception Not_found -> -100
      let _ = Session.set_session_data session (Count (count+1))
    </script>
  </head>
  <body>
  ...
  ]}

- The three kinds of OCaml sections which are not inside others are compiled
  as toplevel expressions. You may define types, values, modules, ...

- In [<ml>...</ml>] sections and you can use [echo] and [printf] from a module
  of type {!Simple_httpd.Input.Output}.

- Inside [<ml>...</ml>] sections, html sections are interpreted as ocaml strings.

- Nested OCaml sections are emitted as ocaml code with no modification except
  closing the string which is currently produced. For instance, in the above
  example,

{[
	<ml>
	  let _ =
	    echo (if n mod 2 = 0 then
 	            <li>even (<ml> ^ string_of_int n ^ </ml>)</li>
	          else <li>odd</li>)
	</ml>
]}

is transformed to

{[
  let _ = echo (if n mod 2 = 0 then
 	            "<li>even (" ^ string_of_int n ^ ")</li>"
	          else "<li>odd</li>")
]}

- In tag attributes one may use `name="$expression"` to evaluate the
   attribute using Ocaml. Use "\$..." if you want an attribute starting with
   a dollar sign. This is limited to ocaml expression without double quote.
   Use [ {|...|} ] alternative syntax for string.

Here is the documentation of the [vfs_pack] command line:

{[
vfs-pack [opt]+
]}
Builds an OCaml module containing a {!Simple_httpd.Dir.Embedded_fs.t}
virtual file system. This is useful to pack assets into an OCaml binary,
for example. Each entry in the VFS can be added from the command line.
{[
  -v             verbose mode
  -o             <file> set output file
  --file         <name,file> adds name=file to the VFS
  --url          <name,url> adds name=url to the VFS
  --mirror       <prefix,dir> adds prefix=dir to the vfs, copying all files in directory dir
  --max-size     <size>, max size to hold file in memory (default: infinite). Bigger filed are copied to the folder given by --destination. A compressed version .zlib is also produced if it is at least 10% smaller.
  --destination  <dir> set the destination folder to use with mirror
  --perm         <int> set the permission of created folder
  -F             <file> reads entries from the file, written using this command line option syntax.
  -help          Display this list of options
  --help         Display this list of options
]}
