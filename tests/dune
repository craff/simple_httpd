;echo

(rule
  (targets echo1.out)
  (deps (:bin ../examples/echo.exe) echo1.sh)
  (locks /port)
  (enabled_if (= %{system} "linux"))
  (package simple_httpd_camlzip)
  (action (with-stdout-to %{targets} (run ./echo1.sh %{bin}))))

(rule
  (alias runtest)
  (package simple_httpd_camlzip)
  (enabled_if (= %{system} "linux"))
  (action (diff echo1.expect echo1.out)))

;sse

(rule
  (targets sse_count.out)
  (deps (:bin ../examples/sse_server.exe) sse_count.sh)
  (locks /port)
  (enabled_if (= %{system} "linux"))
  (package simple_httpd)
  (action (with-stdout-to %{targets} (run ./sse_count.sh %{bin}))))

(rule
  (alias runtest)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (action (diff sse_count.expect sse_count.out)))

;chunked

(rule
  (targets chunked-out)
  (deps (:bin ../src/bin/http_of_dir.exe) foo_50 chunked.sh)
  (locks /port)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (action (with-stdout-to %{targets}
                          (run ./chunked.sh %{bin}))))

(rule
  (alias runtest)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (action (diff chunked-out.expect chunked-out)))

;chunked-ssl

(rule
  (targets chunked-ssl-out)
  (deps (:bin ../src/bin/http_of_dir.exe) foo_50 domain.crt domain.key
  	chunked_ssl.sh)
  (locks /port)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (action (with-stdout-to %{targets}
                          (run ./chunked_ssl.sh %{bin}))))

(rule
  (alias runtest)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (action (diff chunked-ssl-out.expect chunked-ssl-out)))

;stress
(rule
  (targets dl-stress)
  (deps (:bin ../src/bin/http_of_dir.exe) foo_50 stress.sh)
  (locks /port)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (action (with-stdout-to %{targets}
                          (run ./stress.sh %{bin} 15))))

(rule
  (alias runtest)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (action (diff dl-stress.expect dl-stress)))

;ssl stress
(rule
  (targets dl-stress-ssl)
  (deps (:bin ../src/bin/http_of_dir.exe) foo_50 domain.crt domain.key
  	stress-ssl.sh)
  (locks /port)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (action (with-stdout-to %{targets}
                          (run ./stress-ssl.sh %{bin} 15))))

(rule
  (alias runtest)
  (package simple_httpd)
  (enabled_if (= %{system} "linux"))
  (action (diff dl-stress-ssl.expect dl-stress-ssl)))

(rule
  (targets foo_50)
  (enabled_if (= %{system} "linux"))
  (action
    (bash "dd if=/dev/random of=%{targets} bs=1M count=50")))

(rule
  (targets domain.crt domain.key)
  (enabled_if (= %{system} "linux"))
  (action
    (bash "openssl req -newkey rsa:2048 -keyout domain.key -x509 -days 365 -out domain.crt -nodes -subj '/C=/ST=/L=/O=/CN=localhost' 2> /dev/null")))
